<!DOCTYPE html>
<!-- $Id: picksongs.html,v 1.1 2020/09/10 19:42:47 dfm Exp dfm $
     Log: picksongs.html,v $
     Revision 1.1  2020/09/10 19:42:47  dfm
     Initial revision


     provide song list for cheat-sheet song selection

     save the song list to local storage and invoke cheat.html
-->
<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Pick songs</title>
<!-- select-css from https://www.filamentgroup.com/lab/select-css.html -->
<style>
.select-css {
	display: inline-block; width: auto;
    text-align: center;
	font-size: 20px;
	font-family: sans-serif;
	font-weight: 700;
	color: #444;
	line-height: 1.1;
	padding: .6em 1.4em .5em .8em;
	box-sizing: border-box;
	margin: 0;
	border: 1px solid #aaa;
	box-shadow: 0 1px 0 1px rgba(0,0,0,.04);
	border-radius: .5em;
	-moz-appearance: none;
	-webkit-appearance: none;
	appearance: none;
	background-color: #fff;
	background-repeat: no-repeat, repeat;
	background-position: right .7em top 50%, 0 0;
	background-size: .65em auto, 100%;
}
.select-css::-ms-expand {
	display: none;
}
.select-css:hover {
	border-color: #888;
}
.select-css:focus {
	border-color: #aaa;
	box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);
	box-shadow: 0 0 0 3px -moz-mac-focusring;
	color: #222;
	outline: none;
}
.select-css option {
	font-weight:normal;
}
table {
    font-family:Arial; font-size: 20px;
    border-width:5px; border-collapse: collapse;
    padding: 4px;
    min-width: 400px;
}
tr { page-break-inside: avoid; }
th { background-color:lightgreen; font-weight: bold; vertical-align: text-top; text-align: center; }
td { padding: 4px; text-align: center; }
.chosen { background-color: lightblue; }
.hidden { display: none; }
.donebutt { font-weight: bold; background-color: yellow; font-size: 20px; }
body{ -webkit-print-color-adjust:exact; }
</style>
<script type="text/javascript">

var songorder = 0;
var songlist = [];

function fmtDate(dstr) {
    // expecting dstr like "2028-02-29T23:04", but anything Date 
    // will accept should do. 
    let monam = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];

    let d = new Date(dstr);
    let longmon = monam[d.getMonth()];
    let day = d.getDate();
    let dmon = d.getMonth() + 1;
    let yr = d.getFullYear();
    let hr = d.getHours();
    let dmin = d.getMinutes();

    let ampm = "AM";
    if (hr > 11) {
        ampm = "PM";
    }
    if (hr > 12) {
        hr -= 12;
    }

    let mons = dmon.toString().padStart(2, 0);
    let days = day.toString().padStart(2, 0);
    let hrs = hr.toString().padStart(2, 0);
    let mins = dmin.toString().padStart(2, 0);

    // e.g., September 9, 2020 12:29PM
    let datstr = longmon + " " + day + ", " + yr + " " + hrs + ":" + mins + ampm;
    let datndx = yr + mons + days + hrs + mins;
    return([datstr,datndx]);
}

function selme(el) {
    // order cell is first child of the row
    let ordel = el.childNodes[0];

    // nbsp; is char code a0 hex. cell will have
    // that value until it has been selected.
    if (ordel.textContent == "\xa0") {
        songorder += 1;
        ordel.textContent = songorder.toString();
        el.classList.add("chosen");
    } else {
        // if this song was already chosen, un-choose it and
        // blank out the order. choosing it again will put it 
        // at the current end.
        el.classList.remove("chosen");
        ordel.textContent = "\xa0";
    }
}

var cat_selected = [];

function setcats() {
    // make cat_selected array agree with cat select checklists.

    let catsels = document.querySelectorAll("input[name='cats']");

    for (let catel of catsels) {
        // category name follows the checkbox, and has unwanted
        // whitespace after it.
        let cat = catel.nextSibling.textContent.replace(/(\s+$)/,'');
        cat_selected[cat] = catel.checked;
    }
}

function togcat() {
    // one of the "show category" checkboxes has changed.
    // set the hidden value as appropriate for each row.
    // only set hidden if all categories for the song are un-checked.

    // get current states for the category selections.
    setcats();

    let songrows = document.querySelectorAll(".song");

    for (let songrowel of songrows) {
        let songcats = songrowel.classList;

        // if any of a song's cats (except hidden) is
        // checked, show the song.
        let showit = false;
        let ishidden = false;
        for (let scat of songcats) {
            if (scat == "hidden") {
                ishidden = true;
            } else if (scat == "song") {
            } else if (cat_selected[scat]) {
                showit = true;
            }
        }

        if (showit) {
            if (ishidden) {
                // currently hidden, but should be showed.
                songrowel.classList.remove("hidden");
            }
        } else {
            if (! ishidden) {
                // not hidden, but don't showit
                songrowel.classList.add("hidden");
            }
        }
    }
}

function alldone() {
    let sel = document.getElementById("vensel");
    let ndx = sel.selectedIndex;
    if (ndx == 0) {
        alert("Please select a venue from the 'Songs for' menu!");
        return;
    }

    var songs = [];
    for (let element of document.getElementsByClassName("chosen")) {
        let song = element.childNodes[1].textContent;
        if (element.classList.contains("hidden")) {
            if (confirm(`Include hidden song ${song}?`)) {
                let ord = Number(element.childNodes[0].textContent) - 1;
                songs[ord] = song;
            }
        } else {
            let ord = Number(element.childNodes[0].textContent) - 1;
            songs[ord] = song;
        }
    }
    if (songs.length < 1) {
        alert("No songs selected?");
        return;
    }

    // songs array may be sparse if any song was de-selected.
    // json will put 'null' for any empty cell. this gets rid of that.
    var seq = [];
    for (let song of songs) {
        if (song) {
            seq.push(song);
        }
    }

    let datel = document.getElementById("eventdate");
    let evdate = datel.value;

    let [fulldate, datndx] = fmtDate(evdate);

    var venue;
    let evndx = sel.options[ndx].value;

    if (evndx == "") {
        venue = sel.options[ndx].textContent;
    } else {
        // let ev = JSON.parse(eventlist[evndx]);
        let ev = eventlist[evndx];
        venue = ev['where'];
    }

    let newevent = JSON.stringify({'datndx': datndx, 'when': fulldate, 'where': venue, 'songlist': seq });

    // save the new event in local storage.
    localStorage.setItem('showEvent', newevent);

    window.location.href = "cheat.html";
}

function loadDoc(doc) {
  let xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
    docReady(this);
    }
  };
  xhr.open("GET", doc, true);
  xhr.send();
}

var songtableel;
var songlib = [];
function docReady(json) {
    let jsontxt = json.responseText;
    let sljson = JSON.parse(jsontxt);

    let voices = ['mix', 'bass', 'bari', 'lead', 'tenor'];
    let others = ['key', 'cat', 'firstwords', 'title'];

    for (let song in sljson) {
        songlib[song] = [];
        for (let voice in sljson[song]) {
            if (voices.includes(voice)) {
                songlib[song][voice] = [];
                for (let mod in sljson[song][voice]) {
                    songlib[song][voice][mod] = sljson[song][voice][mod];
                }
            } else {
                if (others.includes(voice)) {
                    songlib[song][voice] = sljson[song][voice];
                } else {
                    console.log("voice is " + voice);
                }
            }
        }
    }

    var sorted = [];
    for (let song in songlib) {
        sorted.push(song);
    }
    sorted.sort();

    let songtable = ""
    for (let song of sorted) {
        let cats = songlib[song]['cat'];
        let row = `<tr class="song ${cats}" onclick="selme(this)"><td class="ord">&nbsp;</td><td>${song}</td></tr>`;
        songtable += row;
    }
    var songtableel = document.getElementById("songtable")
    songtableel.outerHTML = songtable;

    togcat();
}
var eventlist = {};
function evsel(el) {
    let ndx = el.selectedIndex;
    let opt = el.options[ndx];
    var songlist;

    // get count of number of songs flagged as chosen.
    let chosenels = document.querySelectorAll(".chosen");
    let nchosen = chosenels.length;

    // if the selected event value is not blank,
    // it had better be an index into the event list.
    // if it is blank, don't disturb the song selections.
    if (opt.value != "") {
        if (nchosen > 0) {
            if (confirm("replace song selections with those from selected event?")) {
                let ev = eventlist[opt.value];
                songlist = ev['songlist'];
            } else {
                // user cancelled - get out of here.
                return;
            }
        } else {
            // selected event has a songlist, and no songs yet chosen.
            // start with the selection's list.
            let ev = eventlist[opt.value];
            songlist = ev['songlist'];
        }
    } else {
        // no songlist for selected event. if songs had been
        // selected, leave them. if not, reset the table.
        if (songorder < 1) {
            songlist = [];
         } else {
            return;
         }
    }

    // check the songlist for songs not in the current library, and for
    // songs in the library but in un-selected categories. Think "Christmas".
    for (let song of songlist) {
        if (song in songlib) {
            let cats = songlib[song].cat.split(" ");
            let songactive = false;
            for (cat of cats) {
                if (cat in cat_selected && cat_selected[cat]) {
                    songactive = true;
                }
            }
            if (! songactive) {
                console.log("no cat active for " + song + " " + cats.join());
            }
        } else {
            console.log(song + " not in songlib!");
        }
     }

    // event selected has no songlist, no songs had been selected, or
    // user says replace selected ones from the old event. init the table.

    // for each tr element...
    for (let element of document.getElementsByTagName("tr")) {
        // if the row is in the songtable...
        if (element.childNodes[0].tagName == "TD" && element.childNodes.length > 1) {
            // get the song name
            let song = element.childNodes[1].textContent;
            // see if it's in the list of songs we want
            let neword = songlist.indexOf(song) + 1;
            let ordel = element.childNodes[0];
            if (neword < 1) {
                // song is not one we want.
                // if this song was already chosen, un-choose it and
                // blank out the order. choosing it again will put it 
                // at the current end.
                element.classList.remove("chosen");
                // order cell is first child of the row
                ordel.textContent = "\xa0";
            } else {
                // song is one we want. set its ord based on
                // position in songlist, and add it to chosen class.
                ordel.textContent = neword.toString();
                element.classList.add("chosen");
            }
        }
    }
    // set songorder global, so new selections will get the correct ord.
    songorder = songlist.length;
}

function init() {
    // init date picker to next Tuesday (today if it's Tuesday)
    loadDoc('songlib.json');

    let d = new Date();
    d.setDate(d.getDate() + (7 - d.getDay() + 2) % 7);
    let datel = document.getElementById("eventdate");

    let day = d.getDate();
    let mo = d.getMonth() + 1;

    let dstr = day.toString().padStart(2, 0);
    let mstr = mo.toString().padStart(2, 0);

    datel.value = d.getFullYear() + "-" + mstr + "-" + dstr + "T19:00";

    // leave first venue "empty" so user knows that one still needs to be selected.
    let venlist = ["", "Zoom", "Rehearsal", "Chehalis West", "Colonial", "Prestige Care",
                         "Sharon Care", "Vintage", "Woodland Village"];

    let sel = document.getElementById("vensel");

    for (let ven of venlist) {
        let opt = document.createElement("option");
        opt.value = "";
        opt.text = ven;
        sel.add(opt);
    }

/*
    let sev = localStorage.getItem('showEvent');
    let sevdat = sev['datndx'];
    eventlist[sevdat] = JSON.parse(sev);

    // get the event-list json from local storage
    let eljson = localStorage.getItem('TunersEvents');

    // if we got a list, convert to a dict (Object, really)
    // and add the events to the location selector.

    if (eljson) {
        eventlist = JSON.parse(eljson);

        var sorted = [];
        for (let evndx in eventlist) {
            sorted.push(evndx);
        }

        // sort event list newest first
        sorted.sort(function(a, b) {
            if (a < b) { return 1;
            } else if (a > b) { 
                return -1;
            } else {
                return 0;
            }
        });

        for (let evndx of sorted) {
            let ev = eventlist[evndx];
            let songlist = ev['songlist'];

            let opt = document.createElement("option");
            opt.value = evndx;
            opt.text = `${ev['where']} - ${ev['when']}`;
            sel.add(opt);
        }
    }
*/
}

</script>
</head>
<body onload="init()">
<table border="1" id="tabid">
<tr><th colspan='2'>
<label for="vensel">Songs for</label>
<select id="vensel" onChange='evsel(this)' class="select-css"></select>
<label for="eventdate">on</label>
<input type="datetime-local" class="select-css" value="" id="eventdate" step="900">
</th></tr>
<tr>
<th><input type="button" class="donebutt" value="Save" onclick="alldone()"/></th>
<th>Song Title</th>
</tr>
<tr id="songtable"></tr>
<tr><td colspan='2'>
 <input type='checkbox' name='cats' onchange="togcat(this)">Christmas</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">Current</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">PoleCat</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">PoleCatII</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">Show</input>
</td></tr>
</table>
</body>
</html>
