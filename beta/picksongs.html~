<!DOCTYPE html>
<!-- $Id: picksongs.html,v 1.1 2020/09/10 19:42:47 dfm Exp dfm $
     Log: picksongs.html,v $
     Revision 1.1  2020/09/10 19:42:47  dfm
     Initial revision


     provide song list for cheat-sheet song selection

     save the song list to local storage and invoke cheat.html
-->
<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Pick songs</title>
<!-- select-css from https://www.filamentgroup.com/lab/select-css.html -->
<style>
.select-css {
	display: inline-block; width: auto;
    text-align: center;
	font-size: 20px;
	font-family: sans-serif;
	font-weight: 700;
	color: #444;
	line-height: 1.1;
	padding: .6em 1.4em .5em .8em;
	box-sizing: border-box;
	margin: 0;
	border: 1px solid #aaa;
	box-shadow: 0 1px 0 1px rgba(0,0,0,.04);
	border-radius: .5em;
	-moz-appearance: none;
	-webkit-appearance: none;
	appearance: none;
	background-color: #fff;
	background-repeat: no-repeat, repeat;
	background-position: right .7em top 50%, 0 0;
	background-size: .65em auto, 100%;
}
.select-css::-ms-expand {
	display: none;
}
.select-css:hover {
	border-color: #888;
}
.select-css:focus {
	border-color: #aaa;
	box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);
	box-shadow: 0 0 0 3px -moz-mac-focusring;
	color: #222;
	outline: none;
}
.select-css option {
	font-weight:normal;
}
table {
    font-family:Arial; font-size: 20px;
    border-width:5px; border-collapse: collapse;
    padding: 4px;
    min-width: 400px;
}
tr { page-break-inside: avoid; }
th { background-color:lightgreen; font-weight: bold; vertical-align: text-top; text-align: center; }
td { padding: 4px; text-align: center; }
.chosen { background-color: lightblue; }
.hidden { display: none; }
.donebutt { font-weight: bold; background-color: yellow; font-size: 20px; }
body{ -webkit-print-color-adjust:exact; }
</style>
<script type="text/javascript">

var songorder = 0;
var songlist = [];

function fmtDate(dstr) {
    // expecting dstr like "2028-02-29T23:04", but anything Date 
    // will accept should do. 
    let monam = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];

    let d = new Date(dstr);
    let longmon = monam[d.getMonth()];
    let day = d.getDate();
    let yr = d.getFullYear();
    let hr = d.getHours();

    let dmon = d.getMonth() + 1;
    let mons = "" + dmon;
    if (dmon < 10) {
      mons = "0" + dmon;
    }

    let days = "" + day;
    if (day < 10) {
        days = "0" + day;
    }

    let ampm = "AM";
    if (hr > 11) {
        ampm = "PM";
    }
    if (hr > 12) {
        hr -= 12;
    }

    let hrs = "" + hr;
    if (hr < 10) {
        hrs = "0" + hr;
    }

    let dmin = d.getMinutes();
    let mins = "" + dmin;
    if (dmin < 10) {
      mins = "0" + dmin;
    }

    // e.g., September 9, 2020 12:29PM
    let datstr = longmon + " " + day + ", " + yr + " " + hrs + ":" + mins + ampm;
    let datndx = yr + mons + days + hrs + mins;
    return([datstr,datndx]);
}

function selme(el) {
    // order cell is first child of the row
    let ordel = el.childNodes[0];

    // nbsp; is char code a0 hex. cell will have
    // that value until it has been selected.
    if (ordel.textContent == "\xa0") {
        songorder += 1;
        ordel.textContent = songorder.toString();
        el.classList.add("chosen");
    } else {
        // if this song was already chosen, un-choose it and
        // blank out the order. choosing it again will put it 
        // at the current end.
        el.classList.remove("chosen");
        ordel.textContent = "\xa0";
    }
}

function togcat(el) {
    // one of the "show category" checkboxes has changed.
    // set the hidden value as appropriate for each row.
    // only set hidden if all categories for the song are un-checked.

    let songrows = document.getElementsByTagName("tr");
    let catsels = document.querySelectorAll("input[type='checkbox']");

    var showcats = [];

    for (let catel of catsels) {
        // category name follows the checkbox, and has unwanted
        // whitespace after it.
        let cat = catel.nextSibling.textContent.replace(/(\s+$)/,'');
        showcats[cat] = catel.checked;
    }

    for (let songrowel of songrows) {
        let songcats = songrowel.classList;
        if (songcats.length == 0) {
            // this row has no classes - skip it. 
            // (this will skip the header rows).
            continue;
        }

        // if any of a song's cats (except hidden) is
        // checked, show the song.
        let showit = false;
        let ishidden = false;
        for (let scat of songcats) {
            if (scat == "hidden") {
                ishidden = true;
            } else if (showcats[scat]) {
                showit = true;
            }
        }

        if (showit) {
            if (ishidden) {
                // currently hidden, but should be showed.
                songrowel.classList.remove("hidden");
            }
        } else {
            if (! ishidden) {
                // not hidden, but don't showit
                songrowel.classList.add("hidden");
            }
        }
    }
}

function alldone() {
    var songs = [];
    for (let element of document.getElementsByClassName("chosen")) {
        let ord = Number(element.childNodes[0].textContent) - 1;
        let song = element.childNodes[1].textContent;
        songs[ord] = song;
    }
    if (songs.length < 1) {
        alert("No songs selected?");
        return;
    }

    // songs array may be sparse if any song was de-selected.
    // json will put 'null' for any empty cell. this gets rid of that.
    var seq = [];
    for (let song of songs) {
        if (song) {
            seq.push(song);
        }
    }

    let venel = document.getElementById("eventvenue");
    let venue = venel.value;

    let datel = document.getElementById("eventdate");
    let evdate = datel.value;

    let [fulldate, datndx] = fmtDate(evdate);

    let newevent = JSON.stringify({'when': fulldate, 'where': venue, 'songlist': seq });

    // get the event-list json from local storage
    let eljson = localStorage.getItem('TunersEvents');

    // if we got a list, convert to a dict (Object, really)
    let eventlist = {};
    if (eljson) {
        eventlist = JSON.parse(eljson);
    }

    // add the JSONified new event to the event list. 
    // Note: if there was already an event on this date and time,
    //  it is replaced.
    eventlist[datndx] = newevent;

    // put it back into local storage.
    localStorage.setItem('TunersEvents', JSON.stringify(eventlist));

    if (confirm(newevent)) {
        window.location.href = "cheat.html";
    } else {
        alert("ok, try again!");
    }
}
function loadDoc(doc) {
  let xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
    docReady(this);
    }
  };
  xhr.open("GET", doc, true);
  xhr.send();
}

var songlib = [];
function docReady(json) {
    let jsontxt = json.responseText;
    let sljson = JSON.parse(jsontxt);

    let voices = ['mix', 'bass', 'bari', 'lead', 'tenor'];
    let others = ['key', 'cat', 'firstwords', 'title'];

    for (let song in sljson) {
        songlib[song] = [];
        for (let voice in sljson[song]) {
            if (voices.includes(voice)) {
                songlib[song][voice] = [];
                for (let mod in sljson[song][voice]) {
                    songlib[song][voice][mod] = sljson[song][voice][mod];
                }
            } else {
                if (others.includes(voice)) {
                    songlib[song][voice] = sljson[song][voice];
                } else {
                    alert("voice is " + voice);
                }
            }
        }
    }

    var sorted = [];
    for (let song in songlib) {
        sorted.push(song);
    }
    sorted.sort();

    let songtable = ""
    for (let song of sorted) {
        let cats = songlib[song]['cat'];
        let row = `<tr class="${cats}" onclick="selme(this)"><td class="ord">&nbsp;</td><td>${song}</td></tr>`;
        songtable += row;
    }
    var stel = document.getElementById("songtable")
    stel.outerHTML = songtable;
}
function init() {
    // init date picker to next Tuesday (today if it's Tuesday)
    loadDoc('songlib.json');

    let d = new Date();
    d.setDate(d.getDate() + (7 - d.getDay() + 2) % 7);
    let datel = document.getElementById("eventdate");

    let day = d.getDate();
    let dstr = "" + day;
    if (day < 10) {
        dstr = "0" + day;
    }

    let mo = d.getMonth() + 1;
    let mstr = "" + mo;
    if (mo < 10) {
        mstr = "0" + mo;
    }

    datel.value = d.getFullYear() + "-" + mstr + "-" + dstr + "T19:00";
}

</script>
</head>
<body onload="init()">
<table border="1" id="tabid">
<tr><th colspan='2'>
<label for="eventvenue">Songs for</label>
<input type="text" list="venues" id="eventvenue" class="select-css" required="required" />
<datalist id="venues">
<option>Rehearsal</option>
<option>Chehalis West</option>
<option>Colonial</option>
<option>Prestige Care</option>
<option>Sharon Care</option>
<option>Vintage</option>
<option>Woodland Village</option>
<option>Zoom</option>
</datalist>
<label for="eventdate">on</label>
<input type="datetime-local" class="select-css" value="" id="eventdate" step="900">
</th></tr>
<tr>
<th><input type="button" class="donebutt" value="Save" onclick="alldone()"/></th>
<th>Song Title</th>
</tr>
<tr id="songtable"></tr>
<tr><td colspan='2'>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">ComingSoon</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">Current</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">PoleCat</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">PoleCatII</input>
 <input type='checkbox' name='cats' checked="1" onchange="togcat(this)">Show</input>
</td></tr>
</table>
</body>
</html>
