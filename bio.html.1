<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Biorhythms</title>
<style>
body { font-family: sans-serif; font-size: 16px; margin: 50px; max-width: 800px; }
</style>
<script src="https://cdn.jsdelivr.net/npm/jquery.flot@0.8.3/jquery.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.flot@0.8.3/jquery.flot.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.flot@0.8.3/jquery.flot.time.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.flot@0.8.3/jquery.flot.resize.js"></script>
<script src="/getqv.js"></script>
<script src="/formatDate.js"></script>
<script>
var oneday = 24.0 * 60.0 * 60.0 * 1000.0; // day worth of millisecs
function bio(bday, doi) {
    let cyclen = {p: 23, e: 28, i: 33};
    let twopi = 2.0 * Math.PI;

    let day1 = doi.getTime() - 12 * oneday;
    let dayn = doi.getTime() + 16 * oneday;

    let dates = [], pdata = [], edata = [], idata = [], adata = [];

    for (let when = day1; when < dayn; when += oneday) {
        let days = (when - bday) / oneday; // age in days on day 'when'

        let p = Math.sin((days % cyclen.p)/cyclen.p *  twopi);
        let e = Math.sin((days % cyclen.e)/cyclen.e *  twopi);
        let i = Math.sin((days % cyclen.i)/cyclen.i *  twopi);

        dates.push(when);
        pdata.push(p);
        edata.push(e);
        idata.push(i);
        adata.push((p + e + i) / 3.0);
    }
    let bdata = {d:dates, p:pdata, e:edata, i:idata, a:adata};

    return bdata;
}
$(function () {
    let names = getQueryVariable('name', []);
    let bdays = getQueryVariable('bday', []);
    let group = getQueryVariable('group', [''])[0];
    let dois = getQueryVariable('doi', [''])[0];
    let doi = dois != '' ? new Date(dois) : new Date();
    let vstr = getQueryVariable('v', [''])[0];
    let verbose = vstr != '';

    let plot_options = {
        lines: { show: true },
        grid: { hoverable: true },
        points: { show: true },
        legend: { show: true, noColumns: 4, position: "nw", margin: 10 },
        xaxis: {
            mode: "time", labelHeight: 20,
            timeBase: "milliseconds", timezone: "utc",
            timeformat: "%b %d", tickSize: [7, "day"]
        },
        yaxis: { min: -1.25, max: 1.75, autoScale: "none" },
    };

    plot_options.legend.noColumns = verbose ? 4 : 1;
    plot_options.yaxis.max = 1.1 + 0.1 * names.length;

    var apei = "apei".split("");

    let data = [];

    for (let who of names) {
        let bds = bdays.shift();
        let bday = new Date(bds);
        let age = ((doi - bday)/(365.25 * oneday)).toFixed(2);
        console.log(`${who} is ${age} years old!`);

        let bdata = bio(bday, doi);
        for (let m of apei) {
            if (verbose || m == 'a') {
                let series = {};
                if (m == 'a') {
                    let bdays = formatDate(bday, "%b %d, %Y")
                    series.label = `${who}: ${bdays} ${age} years old!`;
                } else {
                    series.label = `${who}_${m}`;
                }
                let sdata = [];
                for (let n = 0; n < bdata[m].length; n++) {
                    sdata.push([bdata['d'][n], bdata[m][n]]);
                }
                series.data = sdata;

                data.push(series);
            }
        }
    }
    if (group != '') {
        let groupdata = [];
        let nser = 0;
        for (let s of data) {
            if (s.label.endsWith('old!')) {
                nser += 1;
                if(groupdata.length < 1) {
                    for (let n = 0; n < s.data.length; n++) {
                        // careful to copy values rather than references!
                        let [d, v] = s.data[n];
                        groupdata.push([d, v]);
                    }
                } else {
                    for (let n = 0; n < s.data.length; n++) {
                        groupdata[n][1] += s.data[n][1];
                    }
                }
            }
        }
        for (let n = 0; n < groupdata.length; n++) {
            groupdata[n][1] /= nser;
        }

        let series = {};
        series.label = `${group}`;
        series.data = groupdata;
        data.push(series);
    }

    var placeholder = $("#placeholder");

    let w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    let h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

    $("#placeholder").css({ width: .95 * w, height: .90 * h })

    $(window).on('resize', function() {
        let w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        let h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        $("#placeholder").css({ width: .95 * w, height: .90 * h })
    });

    plot = $.plot(placeholder, data, plot_options);

    function showTooltip(x, y, contents) {
        $('<div id="tooltip">' + contents + '</div>').css( {
            position: 'absolute',
            display: 'none',
            top: y + 5,
            left: x + 5,
            border: '1px solid #fdd',
            padding: '2px',
            'background-color': '#fee',
            opacity: 0.80
        }).appendTo("body").fadeIn(200);
    }

    var previousPoint = null;
    $("#placeholder").bind("plothover", function (event, pos, item) {
        $("#x").text(pos.x.toFixed(2));
        $("#y").text(pos.y.toFixed(2));

        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;
                
                $("#tooltip").remove();
                var d = new Date(item.datapoint[0]),
                    v = item.datapoint[1].toFixed(2);
                sdat = (d.getUTCMonth() + 1) + "/" + d.getUTCDate() + "/" + (d.getUTCFullYear());

                showTooltip(item.pageX, item.pageY,
                            item.series.label + " " + sdat + " = " + v);
            }
        }
        else {
            $("#tooltip").remove();
            previousPoint = null;            
        }
    });
});
</script>
</head>
<body>
 <div id="content>
  <div class="phparent">
   <div id="placeholder"></div>
  </div>
  <p class="message"></p>
 </div>
</body>
</html>
